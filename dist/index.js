const checkType=e=>Object.prototype.toString.call(e).slice(8,-1),isArray=e=>Array.isArray(e),deepClone=function(e){let t;if(isArray(e))t=[],e.forEach(e=>{t.push(deepClone(e))});else if("Object"===checkType(e))for(var r in t={},e)t[r]=deepClone(e[r]);else{if("Function"===checkType(e)){var n="return "+e.toString();return new Function(n).call(this)}if("Set"===checkType(e)){let t=new Set;return e.forEach(e=>{t.add(deepClone(e))}),t}if("Map"===checkType(e)){let r=new Map;return e.forEach((e,t)=>{r.set(t,deepClone(e))}),r}if("Date"===checkType(e))return new Date(e.valueOf());if("RegExp"===checkType(e))return new RegExp(e);t=e}return t},isObject=e=>"[object Object]"===Object.prototype.toString.call(e),throttle=(t,r)=>{let n=0,i=null;function e(){var e=new Date;i&&(clearTimeout(i),i=null),0<e-n-r?(t.call(this,arguments),n=e):i=i||setTimeout(()=>{t.call(this,arguments)},r)}return e.cancel=function(){clearTimeout(i),n=0,i=null},e},debounce=(e,t,r)=>{let n=null;function i(){n?clearTimeout(n):r&&e(arguments),n=setTimeout(()=>{e.call(this,arguments)},t)}return i.cancel=function(){clearTimeout(n),n=null},i},instanceOf=(e,t)=>{for(var r=e.__proto__;;){if(r===t.prototype)return!0;if(null===r)return!1;e=e.__proto__}},normalUnique=r=>{if(isArray(r)){let t=[];for(let e=0;e<r.length;e++)r.indexOf(r[e])===e&&t.push(r[e]);return t}},unique=e=>{if(isArray(e))return e.filter((e,t,r)=>r.indexOf(e)===t)},setUnique=e=>{if(isArray(e))return[...new Set(e)]};class Stack{constructor(){this.items=[]}push(e){this.items.push(e)}pop(){return this.items.pop()}peek(){return this.isEmpty()?null:this.items[this.items.lenght-1]}isEmpty(){return 0===this.items.length}size(){return this.items.length}toString(){return this.items.join("")}}const dec2binary=e=>{let t="",r=new Stack;for(;0<e;)r.push(e%2),e=Math.floor(e/2);for(;!r.isEmpty();)t+=r.pop();return t};class Queue{constructor(){this.items=[]}equeue(e){this.items.push(e)}dequeue(){return this.items.shift()}front(){return this.isEmpty()?null:this.items[0]}isEmpty(){return 0===this.items.length}size(){return this.items.length}toString(){return this.items.join("")}}const passGame=(e,t)=>{let r=new Queue;for(e.forEach(e=>{r.equeue(e)});1<r.size();){for(let e=1;e<t;e++)r.equeue(r.dequeue());r.dequeue()}return r.front()};export{Queue,Stack,checkType,debounce,dec2binary,deepClone,instanceOf,isArray,isObject,normalUnique,passGame,setUnique,throttle,unique};
